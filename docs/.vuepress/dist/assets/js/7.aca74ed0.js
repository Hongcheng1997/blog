(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(t,e,n){"use strict";n.r(e);var a=n(28),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("最近开始使用 angular 做项目，写这篇文章目的是记录 angular 基本的使用，方便快速上手，也是为了防止与其他两个框架混淆。")]),t._v(" "),n("h1",{attrs:{id:"脚手架命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚手架命令"}},[t._v("#")]),t._v(" 脚手架命令")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 安装脚手架\nnpm install -g @angular/cli\n\n// 创建项目\nng new myApp\n\n// 启动项目\nng serve --open\n\n// 创建自定义组件\nng generate component my-new-component\n\n// 创建服务\nng generate service my-new-service\n\n// 创建路由守卫\nng generate guard my-new-guard\n\n// 创建自定义指令\nng generate directive my-new-directive\n")])])]),n("h1",{attrs:{id:"生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),n("p",[t._v("生命周期的顺序")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ngOnChanges\n\n当有父组件传值给子组件，数据发生改变时，子组件会触发该生命周期\n\nngOnInit\n\n初始化完成组件后，调用该钩子\n\nngDoCheck\n\n变更检测，在发生 Angular 无法自己检测的变化时作出反应。\n\nngAfterContentInit\n\n当 Angular 把外部内容投影进组件/指令的视图之后调用\n\nngAfterContentChecked\n\n每当 Angular 完成被投影组件内容的变更检测之后调用。\n\nngAfterViewInit\n\n初始化完组件视图及其子视图之后调用\n\nngAfterViewChecked\n\n每当 Angular 做完组件视图和子视图的变更检测之后调用。\n\nngOnDestroy\n\n销毁组件时调用\n")])])]),n("h1",{attrs:{id:"模板语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板语法"}},[t._v("#")]),t._v(" 模板语法")]),t._v(" "),n("h2",{attrs:{id:"数据文本绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据文本绑定"}},[t._v("#")]),t._v(" 数据文本绑定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{{title}}\n")])])]),n("h2",{attrs:{id:"绑定-html"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#绑定-html"}},[t._v("#")]),t._v(" 绑定 HTML")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<div [innerHTML]="h"></div>\n')])])]),n("h2",{attrs:{id:"数据循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据循环"}},[t._v("#")]),t._v(" 数据循环")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<ul>\n <li *ngFor="let item of list;let i = index;">\n  {{item}}\n </li>\n</ul>\n')])])]),n("h2",{attrs:{id:"管道"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[t._v("#")]),t._v(" 管道")]),t._v(" "),n("p",[t._v("管道（pipe）是用来对输入的数据进行处理，如大小写转换、数值和日期格式化等。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<p>{{today | date:'yyyy-MM-dd HH:mm:ss' }}</p>\n\ntoday: any = new Date()\n")])])]),n("h2",{attrs:{id:"switch-判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#switch-判断"}},[t._v("#")]),t._v(" switch 判断")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<ul [ngSwitch]="title">\n    <li *ngSwitchCase="1">1</li>\n    <li *ngSwitchCase="2">2</li>\n    <li *ngSwitchDefault>3</li>\n</ul>\n')])])]),n("h2",{attrs:{id:"条件判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[t._v("#")]),t._v(" 条件判断")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<p *ngIf="list.length > 3">这是 ngIF 判断是否显示</p>\n')])])]),n("h2",{attrs:{id:"事件绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件绑定"}},[t._v("#")]),t._v(" 事件绑定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<button class="button" (click)="getData()">\n 点击按钮触发事件\n</button>\n')])])]),n("h2",{attrs:{id:"属性绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性绑定"}},[t._v("#")]),t._v(" 属性绑定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<div [id]="id" [title]="msg">调试工具看看我的属性</div>\n')])])]),n("h2",{attrs:{id:"class-绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-绑定"}},[t._v("#")]),t._v(" class 绑定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<p [ngClass]="{\'red\':isTrue}">red</p>\n\n<p [class.red]="isTrue">red</p>\n')])])]),n("h2",{attrs:{id:"style-绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#style-绑定"}},[t._v("#")]),t._v(" style 绑定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<p [ngStyle]=\"{'background-color':color}\">red</p>\n")])])]),n("h2",{attrs:{id:"双向绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定"}},[t._v("#")]),t._v(" 双向绑定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<input [(ngModel)]=\"inputValue\">\n\n注意在 app.module.ts 引入 FormsModule\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n declarations: [\n     AppComponent\n ],\n imports: [\n     BrowserModule,\n     FormsModule\n ],\n providers: [],\n bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n")])])]),n("h1",{attrs:{id:"创建服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建服务"}},[t._v("#")]),t._v(" 创建服务")]),t._v(" "),n("p",[t._v("服务可用来封装一些共用的逻辑，也能做状态管理。通过 ng g service storage 创建 storage 文件")]),t._v(" "),n("p",[t._v("在 app.module.ts 里面引入创建的服务")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { StorageService } from './services/storage.service';\n\n@NgModule({\n declarations: [\n    ...\n ],\n imports: [\n    ...\n ],\n providers: [ StorageService ],\n bootstrap: [ ... ]\n})\nexport class AppModule { }\n")])])]),n("p",[t._v("修改 storage.service.ts")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  public name: string = 'ghc'\n\n  constructor() { }\n\n}\n")])])]),n("p",[t._v("在使用的页面注册服务")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { StorageService } from '../../services/storage.service';\nconstructor(private storage: StorageService) {}\n\nngOnInit() {\n    console.log(this.storage.name)\n}\n")])])]),n("h1",{attrs:{id:"httpclient"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#httpclient"}},[t._v("#")]),t._v(" HttpClient")]),t._v(" "),n("p",[t._v("HttpClient 是 angular 自带的 http 模块")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、在 app.module.ts 引入 http 模块\n\nimport { HttpClientModule } from '@angular/common/http';\n\n2、HttpClientModule 依赖注入\n\n@NgModule({\n declarations: [ ... ],\nimports: [\n    HttpClientModule\n],\nproviders: [ ... ],\nbootstrap: [ ... ]\n})\n\nexport class AppModule { }\n")])])]),n("h2",{attrs:{id:"get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" get")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('1、在需要请求数据的地方引入 HttpClient\n\n    import { HttpClient } from "@angular/common/http";\n\n2、构造函数内声明：\n\n    constructor(private http: HttpClient) { }\n\n3、在对应方法里使用 http：\n\n    this.http.get(url, { params: {} }).subscribe(function(data){\n        console.log(data);\n    },function(err){\n        console.log(err);\n    });\n')])])]),n("h2",{attrs:{id:"delete"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" delete")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('1、在需要请求数据的地方引入 HttpClient\n\n    import { HttpClient } from "@angular/common/http";\n\n2、构造函数内声明：\n\n    constructor(private http: HttpClient) { }\n\n3、在对应方法里使用 http：\n\n    this.http.delete(url, { params: {} }).subscribe(function(data){\n        console.log(data);\n    },function(err){\n        console.log(err);\n    });\n')])])]),n("h2",{attrs:{id:"post"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" post")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、引入 Headers 、Http 模块\n\n    import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\n\n2、实例化 Headers\n\n    public httpOptions = {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n    };\n\n    public httpForm = { \n        headers: new HttpHeaders(\n            { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }\n        ) \n    };\n\n3、post 提交数据\n\n    // json 格式传参\n    this.http.post(api, { username:'张三', age:'20' }, this.httpOptions)\n    .subscribe(response => {\n        console.log(response);\n    });\n\n    // 序列化参数\n    const params = new HttpParams({\n      fromObject: query // 传入的参数对象\n    })\n\n    this.http.post(api, params, this.httpForm).subscribe(response => {\n        console.log(response);\n    });\n")])])]),n("h2",{attrs:{id:"put"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[t._v("#")]),t._v(" put")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1、引入 Headers 、Http 模块\n\n    import { HttpClient, HttpHeaders } from \"@angular/common/http\";\n\n2、实例化 Headers\n\n    public httpOptions = {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n    };\n\n3、put 提交数据\n\n    this.http.put(api, { }, this.httpOptions).subscribe(response => {\n        console.log(response);\n    });\n")])])]),n("h2",{attrs:{id:"拦截器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拦截器"}},[t._v("#")]),t._v(" 拦截器")]),t._v(" "),n("p",[t._v("创建 interceptor.service.ts 文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n    intercept(req: any, next: HttpHandler):\n        Observable<HttpEvent<any>> {\n        // 请求发出前执行\n        console.log(req)\n        return next.handle(req).pipe(\n            tap(\n                event => {\n                    // 请求返回成功\n                    if (event instanceof HttpResponse) {\n                        console.log(event)\n                    }\n                },\n                error => {\n                    // 请求返回失败\n                    console.log(error)\n                }\n            ),\n            finalize(() => {\n                // 不论成功还是失败都会执行\n            })\n        );\n    }\n}\n")])])]),n("p",[t._v("在 app.module.ts 中引入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import { NoopInterceptor } from "./interceptor/interceptor.service"\n\n@NgModule({\n declarations: [\n    ...\n ],\n imports: [\n    ...\n ],\n providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: NoopInterceptor, multi: true }\n ],\n bootstrap: [\n    ...\n ]\n})\n\nexport class AppModule { }\n')])])]),n("h1",{attrs:{id:"父子组件传值-input-output-viewchild"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父子组件传值-input-output-viewchild"}},[t._v("#")]),t._v(" 父子组件传值@Input @Output @ViewChild")]),t._v(" "),n("h2",{attrs:{id:"input"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" @Input")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1\\. 父组件调用子组件的时候传入数据\n\n<app-header [msg]=\"msg\"></app-header>\n\n2\\. 子组件引入 Input 模块\n\nimport { Component, OnInit ,Input } from '@angular/core';\n\n3\\. 子组件中 @Input 接收父组件传过来的数据\n\nexport class HeaderComponent implements OnInit {\n @Input() msg:string\n constructor() { }\n ngOnInit() {}\n}\n")])])]),n("h2",{attrs:{id:"output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" @Output")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('1、父组件监听子组件派发的事件\n\n<app-title text="编辑科室信息" (closeOut)="fn()"></app-title>\n\n2、子组件引入 Output, EventEmitter模块\n\nimport { Component, OnInit , Output, EventEmitter } from \'@angular/core\';\n\n3、子组件中实例化一个自定义事件\n\nexport class TitleComponent implements OnInit {\n\n  @Output() closeOut = new EventEmitter();\n\n  close() {\n    this.closeOut.emit()\n  }\n}\n')])])]),n("h2",{attrs:{id:"viewchild"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#viewchild"}},[t._v("#")]),t._v(" @ViewChild")]),t._v(" "),n("p",[t._v("可用来获取 dom 节点或者组件，类似 vue 的 ref 。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<app-footer #footerChild></app-footer>\n\nimport { OnInit, ViewChild } from '@angular/core';\n\nexport class HomeComponent implements OnInit {\n\n  @ViewChild(\"footerChild\") footer\n\n  constructor() {\n    console.log(this.footer.username)\n  }\n\n}\n")])])]),n("h1",{attrs:{id:"路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),n("h2",{attrs:{id:"_1、在查询参数中传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、在查询参数中传值"}},[t._v("#")]),t._v(" 1、在查询参数中传值")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<a routerLink="/news" [queryParams]="{ id: 1 }">跳转</a>\n\nimport { ActivatedRoute } from \'@angular/router\';\n\nconstructor(private router: ActivatedRoute) { \n    this.router.queryParams.subscribe((v) => {\n      console.log(v)\n    })\n}\n')])])]),n("h2",{attrs:{id:"_2、在路由路径中传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、在路由路径中传值"}},[t._v("#")]),t._v(" 2、在路由路径中传值")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<a [routerLink]=\"['/map', 1]\">跳转</a>\n\nimport { ActivatedRoute } from '@angular/router';\n\nconstructor(private router: ActivatedRoute) { \n    this.router.params.subscribe((v) => {\n      console.log(v)\n    })\n}\n")])])]),n("h2",{attrs:{id:"_3、在路由配置中传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、在路由配置中传值"}},[t._v("#")]),t._v(" 3、在路由配置中传值")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<a routerLink=\"/info\">跳转</a>\n\n{\n    path: 'info',\n    component: InfoComponent,\n    data: [{ id: 2 }]\n}\n\nimport { ActivatedRoute } from '@angular/router';\n\nconstructor(private router: ActivatedRoute) { \n    this.router.snapshot.data[0][\"id\"]\n}\n")])])]),n("p",[t._v("编程式写法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { Router } from '@angular/router';\n\nthis.router.navigate([\"url\"], { queryParams: { id: 1 } });\n")])])]),n("h2",{attrs:{id:"路由守卫"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由守卫"}},[t._v("#")]),t._v(" 路由守卫")]),t._v(" "),n("p",[t._v("通过命令行工具创建 auth 文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ng generate guard auth/auth\n")])])]),n("p",[t._v("auth")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n    console.log('AuthGuard#canActivate called');\n    return true;\n  }\n}\n")])])]),n("p",[t._v("修改 routing.module.ts，在需要拦截的路由中添加 canActivate 属性")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { AuthGuard } from '../auth/auth.guard';\n\nconst adminRoutes: Routes = [\n  {\n    path: 'admin',\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n        {\n        path: '',\n            children: [\n                { path: 'crises', component: ManageCrisesComponent },\n                { path: 'heroes', component: ManageHeroesComponent },\n                { path: '', component: AdminDashboardComponent }\n            ]\n        }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(adminRoutes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AdminRoutingModule {}\n")])])]),n("h1",{attrs:{id:"自定义修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义修饰符"}},[t._v("#")]),t._v(" 自定义修饰符")]),t._v(" "),n("p",[t._v("这里创建一个 click.stop 的自定义指令，功能和 vue 的 @click.stop 修饰符是一样的，阻止点击冒泡。")]),t._v(" "),n("p",[t._v("在命令行中通过 ng generate directive name 命令生成 directive 文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { Directive, Output, EventEmitter, Renderer2, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[click.stop]'\n})\nexport class ClickStopDirective {\n\n  @Output(\"click.stop\") stopPropEvent = new EventEmitter();\n  unsubscribe: () => void;\n\n  constructor(\n    private renderer?: Renderer2,\n    private element?: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.unsubscribe = this.renderer.listen(\n      this.element.nativeElement, 'click', event => {\n        event.stopPropagation();\n        this.stopPropEvent.emit(event);\n      });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe();\n  }\n}\n")])])]),n("p",[t._v("在 app.module.ts 中引入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { ClickStopDirective } from './directive/click-stop.directive';\n\n@NgModule({\n declarations: [\n    ...\n    ClickStopDirective,\n    ...\n],\nimports: [\n    ...\n],\nproviders: [\n    ...\n],\nbootstrap: [\n    ...\n]\n})\n\nexport class AppModule { }\n")])])]),n("p",[t._v("最后在组件之中使用")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\n<div (click)="fn()">\n  <p (click.stop)="fn1()">阻止冒泡</p>\n</div>\n\n``\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);