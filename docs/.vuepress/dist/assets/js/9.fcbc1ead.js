(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{208:function(n,t,a){"use strict";a.r(t);var e=a(28),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"解构赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[n._v("#")]),n._v(" 解构赋值")]),n._v(" "),a("p",[n._v("在 ES5 为变量赋值只能直接指定一个值，如：var a = 1，ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('数组\nlet [a, b, c] = [1, 2, 3]\n相当于\nvar a = 1\nvar b = 2\nvar c = 3\n\n对象\nlet obj = { foo: "aaa", bar: "bbb" }\nlet { foo, bar } = obj\n相当于\nvar foo = obj.foo\nvar bar = obj.bar\n\n字符串\nconst [a, b, c, d, e] = \'hello\'\n\n数字\nlet {toString: s} = 123\n相当于\nlet s = new Number(123).toString\n\n布尔\nlet {toString: s} = true\n相当于\nlet s = new Boolean(true).toString\n')])])]),a("h1",{attrs:{id:"扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[n._v("#")]),n._v(" 扩展运算符")]),n._v(" "),a("p",[a("strong",[n._v("数组扩展运算符")])]),n._v(" "),a("p",[n._v("数组扩展运算符好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("console.log(...[1, 2, 3])  // 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)  // 1 2 3 4 5\n\nfunction add(x, y) {\n  return x + y;\n}\n\nconst numbers = [4, 38];\nadd(...numbers)  // 42\n")])])]),a("p",[a("strong",[n._v("对象扩展运算符")])]),n._v(" "),a("p",[n._v("对象的扩展运算符用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let z = { a: 3, b: 4 };\nlet n = { ...z };\nn  // { a: 3, b: 4 }\n")])])]),a("h1",{attrs:{id:"扩展运算符与解构赋值结合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符与解构赋值结合"}},[n._v("#")]),n._v(" 扩展运算符与解构赋值结合")]),n._v(" "),a("p",[n._v("只能放在参数的最后一位，否则会报错")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("数组扩展运算符可以与解构赋值结合起来，用于生成数组。\n\nconst [first, ...rest] = [1, 2, 3, 4, 5];\n\nconst [first, ...middle, last] = [1, 2, 3, 4, 5]; //err\n\n对象\n\n对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的、但尚未被读取\n的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx // 1\ny // 2\nz // { a: 3, b: 4 }\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);